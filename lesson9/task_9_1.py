__author__ = 'Рейтер Валерия Борисовна'

# 1. Создать класс TrafficLight (светофор).
# Техническое задание:
#
# Хорошо подумайте какие из атрибутов являются атрибутами экземпляра, а какие класса.
# определить у него один атрибут color (цвет) - приватный. Это текущий цвет светофора.
# Определить метод state (состояние), возвращающий текущий цвет в виде строки.
# определить метод running (запуск)
# в рамках метода реализовать переключение светофора в режимы: красный, жёлтый, зелёный
# продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный)
# — на ваше усмотрение
# переключение между режимами должно осуществляться как у реального светофора: красный, жёлтый, зелёный, жёлтый,
# красный и т.д.
# метод меняет текущий цвет светофора и печатает его с помощью state.
# Предусмотреть разумное ограничение на количество итераций.
# Проверить работу примера, создав экземпляр и вызвав метод running.
# Примечание:
#
# Для реализации задержек времени можно воспользоваться функцией sleep пакета time
# Циклическое переключение просто реализовать с помощью cycle пакета itertools
# Усложнение:
#
# Тайминги передаются при создании экземпляра светофора в виде трех чисел.
# Внутри конструктора их надо соединить в единую структуру с цветами, так, чтобы было максимально понятно и лаконично.
# Ограничение на количество итераций в методе running убрать. Прерывание работы светофора реализовать через нажатие
# Crtl-C (или stop в IDE) в процессе выполнения. Найти какое исключение при этом возникает. Обработать его и завершить
# программу с выводом диагностического сообщения.

from time import sleep
from itertools import cycle


class TrafficLight:

    def __init__(self, color="красный"):
        self.color = color

    def state(self):
        result = f"Текущий цвет светофора: {self.color}"
        return result

    def running(self):
        dir_change_time = {"красный": 7, "жёлтый": 2, "зелёный": 10}
        lst_change_state = ["красный", "жёлтый", "зелёный", "жёлтый"]
        light_run = cycle(lst_change_state)

        for i in range(5):
            s_state = next(light_run)
            self.color = s_state
            print(self.state())
            sleep(dir_change_time[s_state])
            i += 1


a = TrafficLight()
print(a.running())



