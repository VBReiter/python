__author__ = 'Рейтер Валерия Борисовна'

# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Формат вывода результата:
#
# Создать не менее пяти-семи экземпляров.
# Выполнить все арифмитические операторы.
# Результаты показать с помощью make_order
# Техническое задание:
#
# Создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки
# (целое число).
# Перегрузить арифметические операторы: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
# (__floordiv__). Вспомнить/посмотреть какие аргументы у операторов и что они возвращают.
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и деление клеток,
# соответственно.
# Сложение. Число ячеек общей клетки равняться сумме ячеек исходных двух клеток.
# Вычитание. Число ячеек общей клетки равняться разности кол-ва ячеек исходных двух клеток. Операцию необходимо
# выполнять, только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Если здесь использовать исключение - посмотрите какой тип исключения подойдет лучше всего.
# Умножение. Число ячеек общей клетки равняться произведению кол-ва ячеек исходных двух клеток.
# Деление. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# Реализовать метод make_order(), принимающий количество ячеек в ряду. Этот метод позволяет организовать ячейки по
# рядам. Метод должен возвращать строку вида *****\n*****\n*****...;, где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся. Возвращаемое
# значение предназначено для последующей передачи в функцию print.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order()
# вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order()
# вернёт строку: *****\n*****\n*****.


class Cell:

    def __init__(self, count_cell):
        self.count_cell = count_cell
        if type(self.count_cell) != int:
            raise ValueError('Параметр должен быть целым числом')

    def __add__(self, other):
        if isinstance(other, Cell):
            return Cell(self.count_cell + other.count_cell)

    def __sub__(self, other):
        if isinstance(other, Cell):
            if self.count_cell - other.count_cell <= 0:
                raise ValueError('Разница ячеек клеток должна быть больше 0')
            return Cell(self.count_cell - other.count_cell)

    def __mul__(self, other):
        if isinstance(other, Cell):
            return Cell(self.count_cell * other.count_cell)

    def __floordiv__(self, other):
        if isinstance(other, Cell):
            return Cell(int(self.count_cell) // int(other.count_cell))

    # def __str__(self):
    #     return str(self.count_cell)

    def make_order(self, cell_row):
        count_res = self.count_cell
        result = ''
        while count_res // cell_row >= 1:
            result += '*'*cell_row+'\n'
            count_res -= cell_row
        result += '*' * count_res + '\n'
        return result


c1 = Cell(17)
c2 = Cell(5)
c3 = Cell(8)
c4 = Cell(21)
c5 = Cell(40)

c6 = c1+c2+c4
c7 = c6//c3
c8 = c2 * c3
c9 = c6 - c5

print(f'Клетка с6:\n{c6.make_order(4)}')
print(f'Клетка с7:\n{c7.make_order(4)}')
print(f'Клетка с8:\n{c8.make_order(4)}')
print(f'Клетка с9:\n{c9.make_order(4)}')


